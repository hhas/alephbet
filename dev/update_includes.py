#!/usr/bin/env python3

import os, re

filenames = {
	'config.h',
	'BStream.cpp',
	'BStream.hpp',
	'byte_swapping.cpp',
	'byte_swapping.hpp',
	'csalerts_sdl.cpp',
	'csalerts.hpp',
	'csalerts.mm',
	'cscluts_sdl.cpp',
	'cscluts.hpp',
	'csdialogs_sdl.cpp',
	'csdialogs.hpp',
	'cseries.hpp',
	'csfonts.hpp',
	'csmacros.hpp',
	'csmisc_sdl.cpp',
	'csmisc.hpp',
	'cspaths_sdl.cpp',
	'cspaths.hpp',
	'cspaths.mm',
	'cspixels.hpp',
	'csstrings.cpp',
	'csstrings.hpp',
	'cstypes.hpp',
	'FilmProfile.cpp',
	'FilmProfile.hpp',
	'mytm_sdl.cpp',
	'mytm.hpp',
	'Movie.cpp',
	'Movie.hpp',
	'SDL_ffmpeg.c',
	'SDL_ffmpeg.h',
	'AStream.cpp',
	'AStream.hpp',
	'crc.cpp',
	'crc.hpp',
	'extensions.hpp',
	'FileHandler.cpp',
	'FileHandler.hpp',
	'find_files_sdl.cpp',
	'find_files.hpp',
	'game_wad.cpp',
	'game_wad.hpp',
	'import_definitions.cpp',
	'Packing.cpp',
	'Packing.hpp',
	'preprocess_map_sdl.cpp',
	'preprocess_map_shared.cpp',
	'resource_manager.cpp',
	'resource_manager.hpp',
	'SDL_rwops_ostream.cpp',
	'SDL_rwops_ostream.hpp',
	'SDL_rwops_zzip.c',
	'SDL_rwops_zzip.h',
	'tags.hpp',
	'wad_prefs.cpp',
	'wad_prefs.hpp',
	'wad_sdl.cpp',
	'wad.cpp',
	'wad.hpp',
	'WadImageCache.cpp',
	'WadImageCache.hpp',
	'devices.cpp',
	'dynamic_limits.cpp',
	'dynamic_limits.hpp',
	'editor.hpp',
	'effect_definitions.hpp',
	'effects.cpp',
	'effects.hpp',
	'ephemera.cpp',
	'ephemera.hpp',
	'flood_map.cpp',
	'flood_map.hpp',
	'interpolated_world.cpp',
	'interpolated_world.hpp',
	'item_definitions.hpp',
	'items.cpp',
	'items.hpp',
	'lightsource.cpp',
	'lightsource.hpp',
	'map_constructors.cpp',
	'map.cpp',
	'map.hpp',
	'marathon2.cpp',
	'media_definitions.hpp',
	'media.cpp',
	'media.hpp',
	'monster_definitions.hpp',
	'monsters.cpp',
	'monsters.hpp',
	'pathfinding.cpp',
	'physics_models.hpp',
	'physics.cpp',
	'placement.cpp',
	'platform_definitions.hpp',
	'platforms.cpp',
	'platforms.hpp',
	'player.cpp',
	'player.hpp',
	'projectile_definitions.hpp',
	'projectiles.cpp',
	'projectiles.hpp',
	'scenery_definitions.hpp',
	'scenery.cpp',
	'scenery.hpp',
	'TickBasedCircularQueue.hpp',
	'weapon_definitions.hpp',
	'weapons.cpp',
	'weapons.hpp',
	'world.cpp',
	'world.hpp',
	'joystick_sdl.cpp',
	'joystick.hpp',
	'mouse_sdl.cpp',
	'mouse.hpp',
	'COPYRIGHT',
	'language_definition.h',
	'lapi.c',
	'lapi.h',
	'lauxlib.c',
	'lauxlib.h',
	'lbaselib.c',
	'lbitlib.c',
	'lcode.c',
	'lcode.h',
	'lctype.c',
	'lctype.h',
	'ldblib.c',
	'ldebug.c',
	'ldebug.h',
	'ldo.c',
	'ldo.h',
	'ldump.c',
	'lfunc.c',
	'lfunc.h',
	'lgc.c',
	'lgc.h',
	'linit.c',
	'liolib.c',
	'llex.c',
	'llex.h',
	'llimits.h',
	'lmathlib.c',
	'lmem.c',
	'lmem.h',
	'lobject.c',
	'lobject.h',
	'lopcodes.c',
	'lopcodes.h',
	'loslib.c',
	'lparser.c',
	'lparser.h',
	'lstate.c',
	'lstate.h',
	'lstring.c',
	'lstring.h',
	'lstrlib.c',
	'ltable.c',
	'ltable.h',
	'ltablib.c',
	'ltm.c',
	'ltm.h',
	'lua_ephemera.cpp',
	'lua_ephemera.hpp',
	'lua_hud_objects.cpp',
	'lua_hud_objects.hpp',
	'lua_hud_script.cpp',
	'lua_hud_script.hpp',
	'lua_map.cpp',
	'lua_map.hpp',
	'lua_mnemonics.hpp',
	'lua_monsters.cpp',
	'lua_monsters.hpp',
	'lua_music.cpp',
	'lua_music.hpp',
	'lua_objects.cpp',
	'lua_objects.hpp',
	'lua_player.cpp',
	'lua_player.hpp',
	'lua_projectiles.cpp',
	'lua_projectiles.hpp',
	'lua_saved_objects.cpp',
	'lua_saved_objects.hpp',
	'lua_script.cpp',
	'lua_script.hpp',
	'lua_serialize.cpp',
	'lua_serialize.hpp',
	'lua_templates.hpp',
	'lua.h',
	'luaconf.h',
	'lualib.h',
	'lundump.c',
	'lundump.h',
	'lvm.c',
	'lvm.h',
	'lzio.c',
	'lzio.h',
	'README',
	'main.cpp',
	'shell_misc.cpp',
	'shell_options.cpp',
	'shell_options.hpp',
	'shell.cpp',
	'shell.hpp',
	'a1-authors.h',
	'ab-authors.h',
	'ActionQueues.cpp',
	'ActionQueues.hpp',
	'alephbet.xpm',
	'alephbet32.xpm',
	'AlephSansMono-Bold.h',
	'alephversion.hpp',
	'binders.hpp',
	'CircularByteBuffer.cpp',
	'CircularByteBuffer.hpp',
	'CircularQueue.hpp',
	'Console.cpp',
	'Console.hpp',
	'CourierPrime.h',
	'CourierPrimeBold.h',
	'CourierPrimeBoldItalic.h',
	'CourierPrimeItalic.h',
	'DefaultStringSets.cpp',
	'DefaultStringSets.hpp',
	'game_errors.cpp',
	'game_errors.hpp',
	'interface_menus.hpp',
	'interface.cpp',
	'interface.hpp',
	'key_definitions.hpp',
	'LockfreeSPSCQueue.hpp',
	'Logging.cpp',
	'Logging.hpp',
	'PairOfShortsHash.hpp',
	'PlayerImage_sdl.cpp',
	'PlayerImage_sdl.hpp',
	'PlayerName.cpp',
	'PlayerName.hpp',
	'powered_by_alephbet_h.h',
	'powered_by_alephbet.h',
	'preference_dialogs.cpp',
	'preference_dialogs.hpp',
	'preferences_widgets_sdl.cpp',
	'preferences_widgets_sdl.hpp',
	'preferences.cpp',
	'preferences.hpp',
	'ProFontAO.h',
	'progress.hpp',
	'Random.hpp',
	'Scenario.cpp',
	'Scenario.hpp',
	'sdl_dialogs.cpp',
	'sdl_dialogs.hpp',
	'sdl_network.hpp',
	'sdl_widgets.cpp',
	'sdl_widgets.hpp',
	'shared_widgets.cpp',
	'shared_widgets.hpp',
	'Statistics.cpp',
	'Statistics.hpp',
	'thread_priority_sdl_dummy.cpp',
	'thread_priority_sdl_macosx.cpp',
	'thread_priority_sdl_posix.cpp',
	'thread_priority_sdl_win32.cpp',
	'thread_priority_sdl.hpp',
	'vbl_definitions.hpp',
	'vbl.cpp',
	'vbl.hpp',
	'VecOps.hpp',
	'WindowedNthElementFinder.hpp',
	'ConnectPool.cpp',
	'ConnectPool.hpp',
	'HTTP.cpp',
	'HTTP.hpp',
	'metaserver_dialogs.cpp',
	'metaserver_dialogs.hpp',
	'metaserver_messages.cpp',
	'metaserver_messages.hpp',
	'network_metaserver.cpp',
	'network_metaserver.hpp',
	'SdlMetaserverClientUi.cpp',
	'network_capabilities.cpp',
	'network_capabilities.hpp',
	'network_data_formats.cpp',
	'network_data_formats.hpp',
	'network_dialog_widgets_sdl.cpp',
	'network_dialog_widgets_sdl.hpp',
	'network_dialogs.cpp',
	'network_dialogs.hpp',
	'network_distribution_types.hpp',
	'network_dummy.cpp',
	'network_games.cpp',
	'network_games.hpp',
	'network_lookup_sdl.cpp',
	'network_lookup_sdl.hpp',
	'network_messages.cpp',
	'network_messages.hpp',
	'network_private.hpp',
	'network_star_hub.cpp',
	'network_star_spoke.cpp',
	'network_star.hpp',
	'network_udp.cpp',
	'network.cpp',
	'network.hpp',
	'NetworkGameProtocol.hpp',
	'Pinger.cpp',
	'Pinger.hpp',
	'PortForward.cpp',
	'PortForward.hpp',
	'RingGameProtocol.cpp',
	'RingGameProtocol.hpp',
	'SDL_netx.cpp',
	'SDL_netx.h',
	'SSLP_API.h',
	'SSLP_limited.cpp',
	'SSLP_Protocol.h',
	'standalone_hub_main.cpp',
	'StandaloneHub.cpp',
	'StandaloneHub.hpp',
	'StarGameProtocol.cpp',
	'StarGameProtocol.hpp',
	'Update.cpp',
	'Update.hpp',
	'AnimatedTextures.cpp',
	'AnimatedTextures.hpp',
	'collection_definition.hpp',
	'Crosshairs_SDL.cpp',
	'Crosshairs.hpp',
	'DDS.hpp',
	'ImageLoader_SDL.cpp',
	'ImageLoader_Shared.cpp',
	'ImageLoader.hpp',
	'low_level_textures.hpp',
	'OGL_Faders.cpp',
	'OGL_Faders.hpp',
	'OGL_FBO.cpp',
	'OGL_FBO.hpp',
	'OGL_Headers.hpp',
	'OGL_Model_Def.cpp',
	'OGL_Model_Def.hpp',
	'OGL_Render.cpp',
	'OGL_Render.hpp',
	'OGL_Setup.cpp',
	'OGL_Setup.hpp',
	'OGL_Shader.cpp',
	'OGL_Shader.hpp',
	'OGL_Subst_Texture_Def.cpp',
	'OGL_Subst_Texture_Def.hpp',
	'OGL_Texture_Def.hpp',
	'OGL_Textures.cpp',
	'OGL_Textures.hpp',
	'Rasterizer_OGL.hpp',
	'Rasterizer_Shader.cpp',
	'Rasterizer_Shader.hpp',
	'Rasterizer_SW.hpp',
	'Rasterizer.hpp',
	'render.cpp',
	'render.hpp',
	'RenderPlaceObjs.cpp',
	'RenderPlaceObjs.hpp',
	'RenderRasterize_Shader.cpp',
	'RenderRasterize_Shader.hpp',
	'RenderRasterize.cpp',
	'RenderRasterize.hpp',
	'RenderSortPoly.cpp',
	'RenderSortPoly.hpp',
	'RenderVisTree.cpp',
	'RenderVisTree.hpp',
	'scottish_textures.cpp',
	'scottish_textures.hpp',
	'shape_definitions.hpp',
	'shape_descriptors.hpp',
	'shapes.cpp',
	'SW_Texture_Extras.cpp',
	'SW_Texture_Extras.hpp',
	'textures.cpp',
	'textures.hpp',
	'vec3.hpp',
	'ChaseCam.cpp',
	'ChaseCam.hpp',
	'computer_interface.cpp',
	'computer_interface.hpp',
	'fades.cpp',
	'fades.hpp',
	'FontHandler.cpp',
	'FontHandler.hpp',
	'game_window.cpp',
	'game_window.hpp',
	'HUDRenderer_Lua.cpp',
	'HUDRenderer_Lua.hpp',
	'HUDRenderer_OGL.cpp',
	'HUDRenderer_OGL.hpp',
	'HUDRenderer_SW.cpp',
	'HUDRenderer_SW.hpp',
	'HUDRenderer.cpp',
	'HUDRenderer.hpp',
	'Image_Blitter.cpp',
	'Image_Blitter.hpp',
	'images.cpp',
	'images.hpp',
	'IMG_savepng.c',
	'IMG_savepng.h',
	'motion_sensor.cpp',
	'motion_sensor.hpp',
	'OGL_Blitter.cpp',
	'OGL_Blitter.hpp',
	'OGL_LoadScreen.cpp',
	'OGL_LoadScreen.hpp',
	'overhead_map.cpp',
	'overhead_map.hpp',
	'OverheadMap_OGL.cpp',
	'OverheadMap_OGL.hpp',
	'OverheadMap_SDL.cpp',
	'OverheadMap_SDL.hpp',
	'OverheadMapRenderer.cpp',
	'OverheadMapRenderer.hpp',
	'screen_definitions.hpp',
	'screen_drawing.cpp',
	'screen_drawing.hpp',
	'screen_shared.hpp',
	'screen.cpp',
	'screen.hpp',
	'sdl_fonts.cpp',
	'sdl_fonts.hpp',
	'sdl_resize.cpp',
	'sdl_resize.hpp',
	'Shape_Blitter.cpp',
	'Shape_Blitter.hpp',
	'TextLayoutHelper.cpp',
	'TextLayoutHelper.hpp',
	'TextStrings.cpp',
	'TextStrings.hpp',
	'ViewControl.cpp',
	'ViewControl.hpp',
	'AudioPlayer.cpp',
	'AudioPlayer.hpp',
	'Decoder.cpp',
	'Decoder.hpp',
	'FFmpegDecoder.cpp',
	'FFmpegDecoder.hpp',
	'Music.cpp',
	'Music.hpp',
	'MusicPlayer.cpp',
	'MusicPlayer.hpp',
	'OpenALManager.cpp',
	'OpenALManager.hpp',
	'ReplacementSounds.cpp',
	'ReplacementSounds.hpp',
	'SndfileDecoder.cpp',
	'SndfileDecoder.hpp',
	'song_definitions.hpp',
	'sound_definitions.hpp',
	'SoundFile.cpp',
	'SoundFile.hpp',
	'SoundManager.cpp',
	'SoundManager.hpp',
	'SoundManagerEnums.hpp',
	'SoundPlayer.cpp',
	'SoundPlayer.hpp',
	'StreamPlayer.cpp',
	'StreamPlayer.hpp',
	'CommunicationsChannel.cpp',
	'CommunicationsChannel.hpp',
	'Makefile.am',
	'Message.cpp',
	'Message.hpp',
	'MessageDispatcher.cpp',
	'MessageDispatcher.hpp',
	'MessageHandler.cpp',
	'MessageHandler.hpp',
	'MessageInflater.cpp',
	'MessageInflater.hpp',
	'InfoTree.cpp',
	'InfoTree.hpp',
	'Plugins.cpp',
	'Plugins.hpp',
	'QuickSave.cpp',
	'QuickSave.hpp',
	'XML_LevelScript.cpp',
	'XML_LevelScript.hpp',
	'XML_MakeRoot.cpp',
	'XML_ParseTreeRoot.hpp',
}

rootdir = '../Sources'

def rewrite_include(m):
	s = m.group(1)
	print(' ', s)
	if s not in filenames and s + 'pp' in filenames:
		s += 'pp'
	return f'#include "{s}"'

def update_file(path):
	print(path)
	with open(path, 'r', encoding='utf8') as f:
		s = f.read()
	s = re.sub(r'#\s*include\s*"(.+?)"', rewrite_include, s)
	with open(path, 'w', encoding='utf8') as f:
		f.write(s)


def walk_dir(dirpath):
	for name in os.listdir(dirpath):
		if name.startswith('.'):
			continue
		path = os.path.join(dirpath, name)
		if os.path.isdir(path):
			walk_dir(path)
		elif name.endswith('pp'):
			update_file(path)

walk_dir(rootdir)

		
			
			


